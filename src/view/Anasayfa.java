/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import data.CinsStok;
import data.DataSource;
import data.Stok;
import java.awt.Color;
import java.awt.Dimension;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import java.awt.Dimension;
import java.util.ArrayList;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;

/**
 *
 * @author Yunus
 */
public class Anasayfa extends javax.swing.JPanel {

    /**
     * Creates new form Anasayfa
     */
    DataSource dataSource;
    ArrayList<CinsStok> allCinsStok;
    ArrayList<Stok> allStok;

    public Anasayfa() {
        initComponents();
        initUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBarC = new javax.swing.JPanel();
        pieCPanel = new javax.swing.JPanel();

        setBackground(java.awt.Color.white);

        panelBarC.setBackground(java.awt.Color.lightGray);

        javax.swing.GroupLayout panelBarCLayout = new javax.swing.GroupLayout(panelBarC);
        panelBarC.setLayout(panelBarCLayout);
        panelBarCLayout.setHorizontalGroup(
            panelBarCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        panelBarCLayout.setVerticalGroup(
            panelBarCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 297, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pieCPanelLayout = new javax.swing.GroupLayout(pieCPanel);
        pieCPanel.setLayout(pieCPanelLayout);
        pieCPanelLayout.setHorizontalGroup(
            pieCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pieCPanelLayout.setVerticalGroup(
            pieCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 251, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBarC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pieCPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pieCPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(panelBarC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelBarC;
    private javax.swing.JPanel pieCPanel;
    // End of variables declaration//GEN-END:variables

    private void initUI() {
        initBarChart();
        initPieChart();
    }

    private void initBarChart() {
        dataSource = new DataSource();
        allStok = new ArrayList<>();
        DefaultCategoryDataset dod = new DefaultCategoryDataset();
        Runnable task = () -> {
            dataSource.openConnection();
            allStok = dataSource.getAllStok("");
            dataSource.closeConnection();
            if (allStok.size() > 0) {
                int toplam = 0;
                for (Stok s : allStok) {
                    toplam += s.getMiktar();
                }
                for (Stok s : allStok) {
                    double oran=(double)((double)s.getMiktar()/(double)toplam);
                    double width=( oran* 100);
                    dod.setValue(width, s.malzeme.getMalzemeAdi(), s.malzeme.getMalzemeAdi());

                }
                JFreeChart jchart = ChartFactory.createBarChart("Stok Ürünleri", "Ürün Cinsi",
                        "Miktarın Yüzdelik Yeri", dod, PlotOrientation.VERTICAL, true, true, false);
                
                

                CategoryPlot plot = jchart.getCategoryPlot();
                plot.setRangeGridlinePaint(Color.black);
                
                panelBarC.setLayout(new java.awt.BorderLayout());

                
                ChartPanel barChartPanel = new ChartPanel(jchart);
                Dimension d = barChartPanel.getPreferredSize();
                d.height = 200;
                d.width = 300;
                barChartPanel.setPreferredSize(d);
                

                panelBarC.removeAll();
                panelBarC.add(barChartPanel);
                panelBarC.revalidate();
                panelBarC.repaint();
                panelBarC.updateUI();
            }

        };
        Thread thread=new Thread(task);
        thread.start();

        //ChartFrame chartFrame=new ChartFrame("Student Record", jchart,true);
        //chartFrame.setVisible(true);
        //chartFrame.setSize(300, 200);
    }

    private void initPieChart() {
        dataSource = new DataSource();
        allCinsStok = new ArrayList<>();
        DefaultPieDataset dop=new DefaultPieDataset();
        Runnable task = () -> {
            dataSource.openConnection();
            allCinsStok = dataSource.getCinsStoks();
            dataSource.closeConnection();
            if (allCinsStok.size() > 0) {
                for (CinsStok cins : allCinsStok) {
                   
                    dop.setValue(cins.getCinsAdi(), new Double(cins.getToplamAdet()));
                }
                JFreeChart jpchart = ChartFactory.createPieChart("Stok Miktarı",dop);

                pieCPanel.setLayout(new java.awt.BorderLayout());
                ChartPanel pieChartPanel = new ChartPanel(jpchart);
                Dimension p = pieChartPanel.getPreferredSize();
                p.height = 200;
                p.width = 300;
                pieCPanel.setPreferredSize(p);
                
                pieCPanel.removeAll();
                pieCPanel.add(pieChartPanel);
                pieCPanel.revalidate();
                pieCPanel.repaint();
                pieCPanel.updateUI();

            }

        };
        Thread thread=new Thread(task);
        thread.start();
    }
}
